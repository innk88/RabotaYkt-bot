from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, BotCommand, KeyboardButton, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler, JobQueue, CallbackContext, ConversationHandler
from datetime import datetime, timedelta
import logging
from lorabot.lorabot import LoraBot
import re
import asyncio
from playwright.async_api import async_playwright

lora_bot = LoraBot("AnalyticBot")


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)




TOKEN = '6652863347:AAE84XREvCwdiRJMIfzTYVhpHJzZTUHNg8o'

ASK_PASSWORD, ASK_DATE, ANALYTIC_MODE, ASK_DATE_START, ASK_DATE_END, ANALYTICS_DATA = range(6)

notifications_sent = {}
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    return ConversationHandler.END

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""

    query = update.callback_query
    await query.answer()

    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
    choice = query.data
    if choice == 'https://rabota.ykt.ru':
        lora_bot.event('–ù–∞–∂–∞—Ç–æ "–°–∞–π—Ç" –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏:', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', update.effective_chat.id)
        

    await query.edit_message_text(text=f"{choice}")

async def send_notification(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    await context.bot.send_photo(chat_id, photo=open('lorabot\screens\img_not_1.png', 'rb'),caption=f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ—è–≤–∏–ª–∏—Å—å 4 –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ üíº")
    keyboard = [[InlineKeyboardButton("–°–∞–π—Ç", callback_data='https://rabota.ykt.ru')]] 
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id,"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–∞–π—Ç.",reply_markup=reply_markup)

async def send_notification_2(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    await context.bot.send_photo(chat_id, photo=open('lorabot\screens\img_not_1.png', 'rb'),caption=f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ—è–≤–∏–ª–∏—Å—å 2 –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ üíº")
    keyboard = [[InlineKeyboardButton("–°–∞–π—Ç", callback_data='https://rabota.ykt.ru')]] 
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id,"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–∞–π—Ç.",reply_markup=reply_markup)

async def send_notification_3(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    text= '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –í–∞—à–µ —Å–æ–¥–µ–π—Å—Ç–≤–∏–µ  –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram-–±–æ—Ç–∞ –æ—Ç Ykt.ru. –í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞ –¥–ª—è –Ω–∞—Å.'
    text2= '–ü–æ–∫–∞ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –≤ —ç—Ç–æ–π —Ñ–æ—Ä–º–µ'
    await context.bot.send_photo(chat_id, photo=open('lorabot\screens\img_not_2.png', 'rb'),caption=text)
    keyboard = [[InlineKeyboardButton("–°—Å—ã–ª–∫–∞", callback_data='https://forms.yandex.ru/u/668f517273cee7bd009f76b6/')]] 
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id,text2,reply_markup=reply_markup)

async def analytics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['Events'] = False 
    context.user_data['Users'] = False
    context.user_data['start_period'] = None 
    context.user_data['end_period'] = None
    if 'analytic_mode' in context.user_data and context.user_data['analytic_mode']:
        if update.message.text == 'Events':
            context.user_data['Events'] = True
            keyboard = [[KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç") ],]
            reply_markup_keyboard = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞?', reply_markup=reply_markup_keyboard)
            return ASK_DATE
        elif update.message.text == 'Users':
            context.user_data['Users'] = True 
            keyboard = [[KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç") ],]
            reply_markup_keyboard = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            await update.message.reply_text('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞?', reply_markup=reply_markup_keyboard)
            return ASK_DATE
        else:
            await context.bot.send_message(update.effective_chat.id,'–í–≤–µ–¥–∏—Ç–µ /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            return ConversationHandler.END
    else:
        await context.bot.send_message(update.effective_chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
        return ASK_PASSWORD

async def analytics_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    date_start = context.user_data['start_period']
    date_end = context.user_data['end_period']
    user_id = update.effective_chat.id
    text = update.message.text
    if context.user_data['Users']:
        if text == "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
            photo_new_users, info_new_users = lora_bot.analyze_new_user(period_start=date_start, period_end=date_end)
            await context.bot.send_message(update.effective_chat.id, info_new_users)
            await context.bot.send_photo(user_id, photo=photo_new_users,caption=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            photo_accum, info_new_users_accum = lora_bot.analyze_user_number_accumulation(period_start=date_start, period_end=date_end)
            await context.bot.send_message(update.effective_chat.id, info_new_users_accum)
            await context.bot.send_photo(user_id, photo=photo_accum,caption=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ–º")
            return ANALYTICS_DATA
            
        if text == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–µ–Ω—å":
            photo_users_dau, info_users_dau = lora_bot.analyze_dau(period_start=date_start, period_end=date_end)
            await context.bot.send_message(update.effective_chat.id, info_users_dau)
            await context.bot.send_photo(user_id, photo=photo_users_dau,caption=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º")
            return ANALYTICS_DATA
        if text == "Total":
            info_total = lora_bot.analyze_total(period_start=date_start, period_end=date_end)
            await context.bot.send_message(update.effective_chat.id, info_total)
            return ANALYTICS_DATA
        if text == "–ß–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–µ–Ω—å":
            photo_messages_number, info_messages_number = lora_bot.analyze_messages_number(period_start=date_start, period_end=date_end)
            await context.bot.send_message(update.effective_chat.id, info_messages_number)
            await context.bot.send_photo(user_id, photo=photo_messages_number,caption=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º")
            return ANALYTICS_DATA
        if text == "–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π":
            info_messages = lora_bot.analyze_messages(period_start=date_start, period_end=date_end, volume=100)
            await context.bot.send_message(update.effective_chat.id, info_messages)
            return ANALYTICS_DATA
        if text == "–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏–π":
            photo_messages_type, info_messages_type = lora_bot.analyze_messages_type(period_start=date_start, period_end=date_end)
            await context.bot.send_message(update.effective_chat.id, info_messages_type)
            await context.bot.send_photo(user_id, photo=photo_messages_type,caption=f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return ANALYTICS_DATA
        keyboard = [
        [KeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
        [KeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–µ–Ω—å")],
        [KeyboardButton("Total")],
        [KeyboardButton("–ß–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–µ–Ω—å")],
        [KeyboardButton("–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")],
        [KeyboardButton("–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")]
        ]
        reply_markup_keyboard = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑', reply_markup=reply_markup_keyboard)

        return ANALYTICS_DATA
    elif context.user_data['Events']:
        if text == "–°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
            info_events = lora_bot.analyze_events(period_start=date_start,period_end=date_end,volume=100)
            await context.bot.send_message(update.effective_chat.id, info_events)
            return ANALYTICS_DATA
        if text == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –ø–æ –¥–Ω—è–º":
            photo_events_number, info_events_number= lora_bot.analyze_events_number(period_start=date_start, period_end=date_end)
            await context.bot.send_message(update.effective_chat.id, info_events_number)
            await context.bot.send_photo(user_id, photo=photo_events_number,caption=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –ø–æ –¥–Ω—è–º")
            return ANALYTICS_DATA
        if text == "–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏–π":
            photo_messages_type, info_messages_type = lora_bot.analyze_events_type(period_start=date_start, period_end=date_end)
            await context.bot.send_message(update.effective_chat.id, info_messages_type)
            await context.bot.send_photo(user_id, photo=photo_messages_type,caption=f"–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏–π")
            return ANALYTICS_DATA    
        keyboard = [
        [KeyboardButton("–°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")],
        [KeyboardButton("–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏–π")],
        [KeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –ø–æ –¥–Ω—è–º")]
        
        ]
        reply_markup_keyboard = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑', reply_markup=reply_markup_keyboard)
        return ANALYTICS_DATA

async def ask_date_end(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    date = update.message.text

    if bool(re.match(r'^\d{4}-\d{2}-\d{2}$',date)):
        context.user_data['end_period'] = date
        await context.bot.send_message(update.effective_chat.id, '–í—ã –≤–≤–µ–ª–∏ –∫–æ–Ω–µ—Ü –¥–∞—Ç—ã')
        return ANALYTICS_DATA
    else:
        await context.bot.send_message(update.effective_chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ(–æ—Ç–º–µ–Ω–∞ /cancel)')
        return ASK_DATE_END
async def ask_date_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    date = update.message.text
    if bool(re.match(r'^\d{4}-\d{2}-\d{2}$',date)):
        context.user_data['start_period'] = date
        await context.bot.send_message(update.effective_chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
        return ASK_DATE_END
    else:
        await context.bot.send_message(update.effective_chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ(–æ—Ç–º–µ–Ω–∞ /cancel)')
        return ASK_DATE_START        

async def ask_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answer = update.message.text
    if answer == '–î–∞':
        await context.bot.send_message(update.effective_chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
        return ASK_DATE_START
    elif answer == '–ù–µ—Ç':
        await context.bot.send_message(update.effective_chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –±–µ–∑ –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é')
        return ANALYTICS_DATA
    else:
        return ConversationHandler.END
async def ask_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query_password = update.message.text
    if query_password =='lorabot':
        context.user_data['analytic_mode'] = True
        await context.bot.send_message(update.effective_chat.id,'–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ä–µ–∂–∏–º –∞–Ω–∞—Ç–∏–ª–∏–∫–∏.')
        keyboard = [
        [KeyboardButton("Events"), KeyboardButton("Users") ],     
        ]
        reply_markup_keyboard = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text('–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å', reply_markup=reply_markup_keyboard)
        return ANALYTIC_MODE
    else:
        await context.bot.send_message(update.effective_chat.id,'–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
        return ConversationHandler.END

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:  
    user_id = update.effective_chat.id
    context.user_data['analytic_mode'] = False
    #–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    lora_bot.user(user_id, update.message.from_user.language_code)

    #–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥, —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –º–µ–Ω—é –∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    # lora_bot.message(TEXT, TEXT_TYPE, user_id)

    #–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    lora_bot.event('–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç', 'command', update.effective_chat.id)



    text_start = "–Ø —á–∞—Ç –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ RabotaYkt.ruüå±. \n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? \n–Ø –º–æ–≥—É –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø–æ–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏."
    # context.user_data['p_start'] = '2024-07-16' 
    # context.user_data['p_end']= '2024-07-16' 

    
    # info_total = lora_bot.analyze_total()
    # await context.bot.send_message(update.effective_chat.id, info_total) 

    # photo_events_number, info_events_number = lora_bot.analyze_events_number()
    # await context.bot.send_message(update.effective_chat.id, info_events_number)
    # await context.bot.send_photo(user_id, photo=photo_events_number,caption=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –ø–æ –¥–Ω—è–º")

    # photo_new_users, info_new_users = lora_bot.analyze_new_user()
    # await context.bot.send_message(update.effective_chat.id, info_new_users)
    # await context.bot.send_photo(user_id, photo=photo_new_users,caption=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    # photo_accum, info_new_users_accum = lora_bot.analyze_user_number_accumulation()
    # await context.bot.send_message(update.effective_chat.id, info_new_users_accum)
    # await context.bot.send_photo(user_id, photo=photo_accum,caption=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ–º")

    # photo_users_dau, info_users_dau = lora_bot.analyze_dau()
    # await context.bot.send_message(update.effective_chat.id, info_users_dau)
    # await context.bot.send_photo(user_id, photo=photo_users_dau,caption=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º")

    # photo_users_activity, info_users_activity = lora_bot.analyze_hour_activity()
    # await context.bot.send_message(update.effective_chat.id, info_users_activity)
    # await context.bot.send_photo(user_id, photo=photo_users_activity,caption=f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è")

    user_id = update.effective_chat.id
  

    for key in context.user_data: # –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–ª—é—á–µ–π
        if key == 'count_yes' or key == 'user_id':
            continue 
        context.user_data[key] = False

    if 'count_yes' not in context.user_data:
        context.user_data['count_yes'] = 0

    keyboard = [
        [KeyboardButton("–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–πüîç")],
        [KeyboardButton("–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏üìë")],
        [KeyboardButton("–°–∞–π—Çüîó")],
        [KeyboardButton("–ü–æ–º–æ—â—åüôèüèª")]
        
    ]
    reply_markup_keyboard = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(text_start, reply_markup=reply_markup_keyboard)

def shorten_text(text, max_length=300):
    if len(text) <= max_length:
        return text
    else:
        last_space = text.rfind(' ', 0, max_length)
        if last_space == -1:
            return text[:max_length - 3] + '...'
        else:
            return text[:last_space] + '...'

def html_to_text(html):
    text=re.sub(r'<br><br>', '<br>', html)
    text=re.sub(r'<br>', '\n', text)
    text=re.sub(r'<.*?>', '', text)
    text=text.rstrip()
    return text
        
async def fetch_vacancies(category, salary, page) -> list:
    try:
        url = f"https://rabota.ykt.ru/jobs?text={category}&rcategoriesIds=&salaryMin{salary}=&salaryMax=&period=ALL&page={page}"
        print(url)
        async with async_playwright() as playwright:
            browser = await playwright.chromium.launch()
            page = await browser.new_page()
            await page.goto(url)
            await page.wait_for_load_state('load', timeout=60000) 
            await page.wait_for_selector('.yui-panel')
            jobs_count_element=await page.query_selector('.r-finded')
            jobs_count_text=await jobs_count_element.inner_text()
            job_elements = await page.query_selector_all('.r-vacancy_wrap')
            jobs = [] 
            jobs.append(jobs_count_text)
            for job_element in job_elements:
                title_element=await job_element.query_selector('.r-vacancy_title')
                salary_element=await job_element.query_selector('.r-vacancy_salary')
                company_element= await job_element.query_selector('.r-vacancy_company a')

                title_text=await title_element.inner_text() if title_element else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                salary_text=await salary_element.inner_text() if salary_element else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                salary_text=salary_text.replace("—Ä—É–±.", "‚ÇΩ")
                company_text= await company_element.inner_text()
                try:
                    address_element=await job_element.query_selector('.r-vacancy_work-address_address')
                    address_text=await address_element.inner_text() if address_element else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                except:
                    address_text="–ù–µ —É–∫–∞–∑–∞–Ω–æ"

                try:
                    requirement_selector='.r-vacancy_body_full div:nth-child(6)'
                    requirement_element= await job_element.query_selector(requirement_selector)
                    requirement_html=await requirement_element.inner_html()
                    requirement_text=html_to_text(requirement_html)
                    requirement_text=shorten_text(requirement_text, max_length=300)
                except:
                    requirement_text="–ù–µ —É–∫–∞–∑–∞–Ω–æ"

                try:
                    condition_selector='.r-vacancy_body_full div:nth-child(8)'
                    condition_element= await job_element.query_selector(condition_selector)
                    condition_html=await condition_element.inner_html()
                    condition_text=html_to_text(condition_html)
                    condition_text=shorten_text(condition_text, max_length=300)
                except:
                    condition_text="–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                
                vacancy_id=await title_element.get_attribute('data-id')
                #print(vacancy_id)
                # obligation_selector='.r-vacancy_body_full div:nth-child(4)'
                # obligation_element=await job_element.query_selector(obligation_selector)
                # obligation_text=await obligation_element.inner_text()
                job_info = f"<b>{title_text}</b> - {salary_text}\n<i>{company_text}</i>\n\n<u>‚úÖ–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</u> {requirement_text}\n\n<u>‚úÖ–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã:</u> {condition_text}\n\n<u>üìç–ê–¥—Ä–µ—Å –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã:</u> {address_text}"
                jobs.append(job_info)
            await browser.close()
            return jobs
    except Exception as e:
        print(f"Error fetching vacancies: {e}")


async def message_find_vacancies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text_find_vac = '–ö–∞–∫—É—é –≤–∞–∫–∞–Ω—Å–∏—é –≤—ã –∏—â–µ—Ç–µ?\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
    keyboard = [
        [KeyboardButton("–ü—Ä–æ–¥–∞–≤–µ—Üüí∞"), KeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äü§≥")],
        [KeyboardButton("–í–æ–¥–∏—Ç–µ–ª—åüöó"), KeyboardButton("–ü–æ–≤–∞—Äüë©‚Äçüç≥")],
        [KeyboardButton("–†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–πüõ†Ô∏è"), KeyboardButton("–ë—É—Ö–≥–∞–ª—Ç–µ—Äüßæ")],
        [KeyboardButton("–í –Ω–∞—á–∞–ª–æ")]
    ]
    context.user_data['find_vac_x'] = True
    reply_markup_keyboard = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(text_find_vac, reply_markup=reply_markup_keyboard)

async def message_search_results( update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    category = context.user_data.get('category', '')
    salary = context.user_data.get('salary', '') 
    if not category: 
        category=""
        return 
    await update.message.reply_text("–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π... üîç")
    jobs = await fetch_vacancies(category, salary, page=1)
    jobs_count_str=jobs.pop(0)
    f=filter(str.isdigit, jobs_count_str)
    jobs_count_str = "".join(f)
    jobs_count=int(jobs_count_str)
    if not jobs: 
        # keyboard = [
        # [KeyboardButton("–¥–∞üôãüèª‚Äç‚ôÇÔ∏è")],
        # [KeyboardButton("–Ω–µ—ÇüôÖüèª‚Äç‚ôÇÔ∏è")],
        # [KeyboardButton("–≤ –Ω–∞—á–∞–ª–æ")]        
        # ]
        keyboard=[[KeyboardButton("–≤ –Ω–∞—á–∞–ª–æ")]]
        context.user_data['ask_to_sub'] = True
        reply_markup_keyboard = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é –∏ –º—ã –ø—Ä–∏—à–ª–µ–º –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–∞—èüòâ\n–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é?", reply_markup=reply_markup_keyboard)
    else: 
        context.user_data['jobs']=jobs
        context.user_data['jobs_count']=jobs_count
        context.user_data['current_group']=0
        context.user_data['current_page']=1
        context.user_data['page_count']=-(-jobs_count//20)
        salary={context.user_data.get('salary')}
        f_salary=""
        if any(ch.isdigit() for ch in salary):
            salary_int=int("".join(f"{s}" for s in salary))
            salary_str=f"{salary_int:,}".replace(",", " ")
            f_salary = f"–æ—Ç " +salary_str +" ‚ÇΩ"
        else:
            f_salary=salary
        context.user_data['formatted_salary']=f_salary
        # print(-(-jobs_count//20))
        await update.message.reply_text(f"üëÄ –ù–∞–π–¥–µ–Ω–æ {context.user_data.get('jobs_count')} –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n –î–æ–ª–∂–Ω–æ—Å—Ç—å: {context.user_data.get('category')}\n –ó–∞—Ä–ø–ª–∞—Ç–∞: {f_salary}")
        await show_vacancies(update, context)

async def show_vacancies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    current_group=context.user_data.get('current_group', 0)
    jobs=context.user_data.get('jobs', [])
    page_count=context.user_data.get('page_count',1)
    current_page=context.user_data.get('current_page', 1)
    if not jobs:
        await update.message.reply_text("–ë–æ–ª—å—à–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 
        return
    jobs_count=len(jobs)
    vacancies_per_page=3
    start_index=current_group*vacancies_per_page
    end_index=min(start_index+vacancies_per_page, jobs_count)
    current_index=start_index
    for vacancy in jobs[start_index:end_index]:
        await update.message.reply_text(f"{current_index+1+(current_page-1)*20}. {vacancy}", parse_mode="html")
        current_index+=1
    keyboard=[]
    if not(current_group==0 and current_page==1):
        keyboard.append([KeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥")])
    if not(end_index==jobs_count and current_page==page_count):
        keyboard.append([KeyboardButton("–í–ø–µ—Ä–µ–¥‚û°Ô∏è")])
    #keyboard.append([KeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—éüîî")])
    keyboard.append([KeyboardButton("–í –Ω–∞—á–∞–ª–æ")])
    reply_markup_keyboard = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True) 
    await update.message.reply_text("–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞–∂–º–∏—Ç–µ \"–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è\" ", reply_markup=reply_markup_keyboard)

async def handle_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text=update.message.text
    if text=="–í–ø–µ—Ä–µ–¥‚û°Ô∏è":
        context.user_data['current_group']+=1
        if(context.user_data.get('current_group')==7):
            context.user_data['current_page']+=1
            context.user_data['current_group']=0
            category = context.user_data.get('category', '')
            salary = context.user_data.get('salary', '') 
            page=context.user_data.get('current_page')
            jobs=await fetch_vacancies(category, salary, page)
            jobs.pop(0)
            context.user_data['jobs']=jobs
    elif text=="‚¨ÖÔ∏è–ù–∞–∑–∞–¥":
        context.user_data['current_group']-=1
        current_group=context.user_data.get('current_group')
        print(current_group)
        if(current_group==-1):
            print("alo")
            await update.message.reply_text("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞")
            context.user_data['current_page']-=1
            context.user_data['current_group']=6
            category = context.user_data.get('category', '')
            salary = context.user_data.get('salary', '') 
            page=context.user_data.get('current_page')
            jobs=await fetch_vacancies(category, salary, page)
            if not jobs: 
                await update.message.reply_text("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await start(update, context)
                return
            jobs.pop(0)
            context.user_data['jobs']=jobs
    elif text=="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—éüîî":
        update.message.reply_text(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é \"{context.user_data.get('category')}, –∑–∞—Ä–ø–ª–∞—Ç–∞ - {context.user_data.get('formatted_salary')}\"")
        #—Ç—É—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ 2
    await show_vacancies(update, context)

# async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     category = update.message.text
#     if category == "–≤ –Ω–∞—á–∞–ª–æ":
#         # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
#         await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ.")
#         return
#     vacancies = await fetch_vacancies(category)
#     if vacancies:
#         for vacancy in vacancies:
#             await update.message.reply_text(vacancy)
#         # response = f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':\n" + "\n".join(vacancies)
#     else:
#         response = f"–í–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
#         await update.message.reply_text(response)


# async def message_find_vacancies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     text_find_vac = '–ö–∞–∫—É—é –≤–∞–∫–∞–Ω—Å–∏—é –≤—ã –∏—â–µ—Ç–µ?\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
#     lora_bot.event('–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π', 'command', update.effective_chat.id)
#     keyboard = [
#         [KeyboardButton("–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞üí∏"), KeyboardButton("–ü—Ä–æ–¥–∞–≤–µ—Üüõí") ],
#         [KeyboardButton("–ò–Ω–∂–µ–Ω–µ—Äüßëüèª‚Äçüîß"), KeyboardButton("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫üë®üèª‚Äçüíª")],
#         [KeyboardButton("–≤ –Ω–∞—á–∞–ª–æ")]        
#     ]
#     context.user_data['find_vac_x'] = True
#     reply_markup_keyboard = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
#     await update.message.reply_text(text_find_vac, reply_markup=reply_markup_keyboard)


async def message_my_subs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    lora_bot.event('–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', 'menu', update.effective_chat.id)

    text_my_subs = f'–£ –≤–∞—Å —Å–µ–π—á–∞—Å {context.user_data["count_yes"]} –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏. –ú—ã –ø—Ä–∏—à–ª–µ–º –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è'
    await update.message.reply_text(text_my_subs)

async def message_site(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    lora_bot.event('–ó–∞–ø—Ä–æ—Å —Å–∞–π—Ç–∞', 'menu', update.effective_chat.id)
    text_site = '–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–∏—Å: https://rabota.ykt.ru'
    await update.message.reply_text(text_site)

async def message_help_me(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    lora_bot.event('–ü–æ–º–æ—â—å', 'menu', update.effective_chat.id)
    text_help_me = '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–º–æ—â–∏ –Ω–∞ —ç—Ç—É –≥—É–≥–ª-—Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏üîó: https://forms.yandex.ru/u/668f517273cee7bd009f76b6/'
    await update.message.reply_text(text_help_me)

async def message_salary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text_salary = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∑–∞—Ä–ø–ª–∞—Ç—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µüí∏'
    keyboard = [
        [KeyboardButton("–æ—Ç 20 000"), KeyboardButton("–æ—Ç 40 000") ],
        [KeyboardButton("–æ—Ç 50 000"), KeyboardButton("–æ—Ç 80 000")],
        [KeyboardButton("–æ—Ç 100 000"), KeyboardButton("–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
        [KeyboardButton("–í –Ω–∞—á–∞–ª–æ")]        
    ]
    context.user_data['salary_vac_x'] = True
    reply_markup_keyboard = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(text_salary, reply_markup=reply_markup_keyboard)




async def message_oops(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text_oops1 = '–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º... –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏.'
    text_oops2 = '‚ùì–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é?'

    keyboard = [
        [KeyboardButton("–¥–∞üôãüèª‚Äç‚ôÇÔ∏è"), KeyboardButton("–Ω–µ—ÇüôÖüèª‚Äç‚ôÇÔ∏è") ],
        [ KeyboardButton("–≤ –Ω–∞—á–∞–ª–æ")]        
    ]
    context.user_data['oops_x'] = True
    reply_markup_keyboard = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(text_oops1)
    await update.message.reply_text(text_oops2, reply_markup=reply_markup_keyboard)







async def handle_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    lora_bot.message(text, '–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', update.effective_chat.id)
    lora_bot.event('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'text', update.effective_chat.id)
    if text.lower() == "–≤ –Ω–∞—á–∞–ª–æ" :
        await start(update,context)
        return
    
    if 'find_vac_x' in context.user_data and context.user_data['find_vac_x']:
        f=filter(str.isalpha, text)
        text = "".join(f)
        context.user_data['category']=text
        await message_salary(update,context)
        context.user_data['find_vac_x'] = False
        # await handle_category_selection(update, context)
        return
    
    if 'salary_vac_x' in context.user_data and context.user_data['salary_vac_x']:
        if (text=="–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):
            context.user_data['salary'] = ""
        else:
            f=filter(str.isdigit, text)
            context.user_data['salary']="".join(f)
        await message_search_results(update, context)
        context.user_data['salary_vac_x']=False
        return
    
    if 'oops_x' in context.user_data and context.user_data['oops_x']:
        
        if text == '–¥–∞üôãüèª‚Äç‚ôÇÔ∏è' or '–¥–∞':
            text_oops = ' –í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—Éüòâ.\n–í—ã –±—É–¥–µ—Ç–µ –æ–¥–Ω–∏–º –∏–∑ –ø–µ—Ä–≤—ã—Ö, –∫—Ç–æ —É–≤–∏–¥–∏—Ç —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é.'
            context.user_data['count_yes'] = context.user_data['count_yes'] + 1
            user_id = update.effective_chat.id
            lora_bot.event('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞" –≤ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'menu', update.effective_chat.id)
            if not notifications_sent.get(user_id, False):
                target_hours_1 = timedelta(hours=24)
                target_hours_2 = timedelta(hours=72)
                target_hours_3 = timedelta(hours=78)
                context.job_queue.run_once(send_notification, target_hours_1, chat_id=user_id, name=str(user_id), data=target_hours_1)
                context.job_queue.run_once(send_notification_2, target_hours_2, chat_id=user_id, name=str(user_id), data=target_hours_2)
                context.job_queue.run_once(send_notification_3, target_hours_3, chat_id=user_id, name=str(user_id), data=target_hours_3)
                notifications_sent[user_id] = True
                    

        if text == '–Ω–µ—ÇüôÖüèª‚Äç‚ôÇÔ∏è' or '–Ω–µ—Ç':
            text_oops = '–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫üîç –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Çüîó'
        await update.message.reply_text(text_oops)
        context.user_data['oops_x'] = False   
        return
    
    if 'ask_to_sub' in context.user_data and context.user_data['ask_to_sub']:
        # if text=='–¥–∞üôãüèª‚Äç‚ôÇÔ∏è' or '–¥–∞':
        #     salary={context.user_data.get('salary')}
        #     ot_text=""
        #     if any(ch.isdigit() for ch in salary):
        #         ot_text+=" –æ—Ç"
        #     await update.message.reply_text(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é \"{context.user_data.get('category')}, –∑–∞—Ä–ø–ª–∞—Ç–∞ -{ot_text} {salary}\"")
        #     #—Ç—É—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        # if text=='–Ω–µ—ÇüôÖüèª‚Äç‚ôÇÔ∏è' or '–Ω–µ—Ç':
        #     await update.message.reply_text("–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫üîç –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Çüîó")
        context.user_data['ask_to_sub']=False

    if  text == "–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–πüîç":
        await message_find_vacancies(update,context)
    elif text == "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏üìë":
        await message_my_subs(update,context)
        
    elif text == "–°–∞–π—Çüîó":
        await message_site(update,context)
    elif text == "–ü–æ–º–æ—â—åüôèüèª":
        await message_help_me(update,context)
    elif text in ["–í–ø–µ—Ä–µ–¥‚û°Ô∏è", "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—éüîî"]:
        await handle_navigation(update, context)
        return
    else:
        await update.message.reply_text("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /start.")


def main():
    # –°–æ–∑–¥–∞–µ–º Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('analytics', analytics)],
        states={
            ASK_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_password)],
            ASK_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_date)],
            ANALYTIC_MODE:[MessageHandler(filters.TEXT & ~filters.COMMAND, analytics)],
            ASK_DATE_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_date_start)],
            ASK_DATE_END: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_date_end)],
            ANALYTICS_DATA: [MessageHandler(filters.TEXT & ~filters.COMMAND, analytics_data)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_keyboard))
    application.add_handler(CommandHandler('find_vacancies', message_find_vacancies))
    application.add_handler(CallbackQueryHandler(button))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()
    
    

if __name__ == '__main__':
    main()
